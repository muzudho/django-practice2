<!-- OAAA1001o1o0ga13o0 -->
{% load static %} {# 👈あとで static "URL" を使うので load static します #}
<!DOCTYPE html>
<html>
    <head>
        <link rel="shortcut icon" type="image/png" href="{% static 'favicon.ico' %}" />
        <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet" />
        <link href="https://cdn.jsdelivr.net/npm/@mdi/font@6.x/css/materialdesignicons.min.css" rel="stylesheet" />
        <link href="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.min.css" rel="stylesheet" />
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui" />
        <title>Life game</title>
        <style>
            /* 等幅 */
            .v-textarea textarea {
                font-family: monospace, monospace;
            }
            /* 生きているセル */
            .live {
                font-family: monospace, monospace;
                color:#FFC107; /* amber */
                background-color:#FFC107; /* amber */
                border:solid 1px black;
            }
            /* 死んでいるセル */
            .dead {
                font-family: monospace, monospace;
                color:#607D8B; /* blue-gray */
                background-color:#607D8B; /* blue-gray */
                border:solid 1px black;
            }
            /* エラーのセル */
            .error {
                font-family: monospace, monospace;
                color:red;
                background-color:red;
                border:solid 1px black;
            }
        </style>
    </head>
    <body>
        <div id="app">
            <v-app>
                <v-main>
                    <v-container fluid>
                        <h1>Life game</h1>
                        <v-form method="POST">
                            {% csrf_token %}

                            <!-- `po_` は POST送信するパラメーター名の目印 -->
                            <!-- 入力 -->
                            <v-textarea name="po_input" required rows="6" v-model="inputText.value" label="Input" :disabled="!inputText.enabled"></v-textarea>

                            <!-- 入力ボタン -->
                            <v-btn block elevation="2" v-on:click="enterVu()" :disabled="!enterButton.enabled"> Enter </v-btn>

                            <!-- 出力 -->
                            <v-textarea name="po_output" rows="1" disabled v-model="outputText.value" label="Output"></v-textarea>
                        </v-form>
                    </v-container>
                    <v-container>
                        <!-- Example: <span id="sq_0" class="live">■</span><span id="sq_1" class="dead">■</span> -->
                        <div id="life_game_canvas" style="line-height:1;"></div>
                    </v-container>
                </v-main>
            </v-app>
        </div>

        <script src="{% static 'lifegame_v1/think/engine/parser/v1o0.js' %}"></script>
        <script src="{% static 'lifegame_v1/think/engine/v1o0.js' %}"></script>
        <script src="{% static 'lifegame_v1/think/position/v1o0.js' %}"></script>
        <script src="{% static 'lifegame_v1/think/things/v1o0.js' %}"></script>
        <script src="{% static 'lifegame_v1/think/things/board/v1o0.js' %}"></script>
        <script src="{% static 'lifegame_v1/think/user_ctrl/v1o0.js' %}"></script>
        <!--            ===========================================
                        1
        1. src1/apps1/lifegame_v1/static/lifegame_v1/think/user_ctrl/v1o0.js
                                  ==========================================
        -->

        <script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/vuetify@2.x/dist/vuetify.js"></script>
        <script>
            /**
             * テーブルを動的生成
             */
            function installTable() {
                let lifeGameCanvas = document.getElementById("life_game_canvas");
                let idCount = 0;

                // 盤[0]について
                // 縦に並べる
                for(let y=0; y<vue1.engine.position.boards[0].height; y++) {
                    // 横に並べる
                    for(let x=0; x<vue1.engine.position.boards[0].width; x++) {
                        let span = document.createElement('span');
                        span.setAttribute("id", `sq_${idCount}`);
                        idCount++;
                        span.setAttribute("class", "dead");
                        span.textContent = "■";
                        lifeGameCanvas.appendChild(span);
                    }

                    // 改行
                    let br = document.createElement('br');
                    lifeGameCanvas.appendChild(br);
                }
            }

            /**
             * テーブルを削除
             */
            function uninstallTable() {
                let lifeGameCanvas = document.getElementById("life_game_canvas");

                // 子要素を全て削除
                var child = lifeGameCanvas.lastElementChild;
                while (child) {
                    lifeGameCanvas.removeChild(child);
                    child = lifeGameCanvas.lastElementChild;
                }
            }

            const vue1 = new Vue({
                el: "#app",
                vuetify: new Vuetify(),
                data: {
                    // 入力
                    inputText: {
                        enabled: true,
                        value: `# 盤[0]サイズ
board 0 width 64
board 0 height 32
# グライダー
board 0 """
................................................................
................................................................
....X...........................................................
.....X..........................................................
...XXX..........................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
................................................................
"""
`,
                    },
                    // 出力
                    outputText: {
                        value: 'Please push "Enter" button.',
                    },
                    // 思考エンジン
                    engine: new Engine(
                        // ユーザーコントロール
                        new UserCtrl()
                    ),
                    // 入力ボタンの活性性
                    enterButton: {
                        enabled: true,
                    },
                    // 入力されたテキスト
                    enteredText : null,
                },
                mounted() {
                    window.onload = ()=>{
                        console.log('ページが読み込まれました！');

                        // タイマー生成
                        intervalMilliseconds = 100;
                        setInterval(() => {
                            this.playVu();
                        }, intervalMilliseconds);
                    }
                },
                methods: {
                    // 関数名の末尾の Vu は vue1 のメソッドであることを表す目印
                    /**
                     * po_input 欄のコマンドを入力します
                     */
                    enterVu() {
                        // this.inputText.enabled = false;
                        // this.enterButton.enabled = false;

                        this.enteredText = vue1.inputText.value;
                        vue1.inputText.value = "";
                    },
                    playVu() {
                        if (this.enteredText !== null) {
                            // 盤[0]サイズを一時記憶
                            let boardWidth = vue1.engine.position.boards[0].width;
                            let boardHeight = vue1.engine.position.boards[0].height;

                            // コマンドを実行
                            let log = vue1.engine.execute(this.enteredText);
                            this.enteredText = null;

                            this.outputText.value = log;

                            // 盤[0]のサイズが変わっていれば作り直し
                            if (boardWidth !== vue1.engine.position.boards[0].width ||
                                boardHeight !== vue1.engine.position.boards[0].height) {
                                uninstallTable();
                                installTable();
                            }
                        } else {
                            // 動かす
                            vue1.engine.userCtrl.doMove(vue1.engine.position);
                        }

                        // 盤[0]表示
                        vue1.engine.position.boards[0].eachSq((sq, cellValue) => {
                            let cell = document.getElementById(`sq_${sq}`);
                            switch(cellValue) {
                                case PC_X:
                                    cell.setAttribute("class", "live");
                                    break;

                                case PC_EMPTY:
                                    cell.setAttribute("class", "dead");
                                    break;

                                default:
                                    cell.setAttribute("class", "error");
                                    break;
                            }
                        })
                    },
                },
            });

            // テーブルを動的生成
            installTable();
        </script>
    </body>
</html>
